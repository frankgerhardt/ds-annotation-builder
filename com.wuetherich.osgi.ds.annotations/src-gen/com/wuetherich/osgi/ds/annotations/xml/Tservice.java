//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.02.15 at 06:39:31 AM CET 
//


package com.wuetherich.osgi.ds.annotations.xml;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.w3c.dom.Element;


/**
 * <p>Java class for Tservice complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Tservice">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="provide" type="{http://www.osgi.org/xmlns/scr/v1.1.0}Tprovide" maxOccurs="unbounded"/>
 *         &lt;any processContents='lax' namespace='##other' maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="servicefactory" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;anyAttribute/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Tservice", propOrder = {
    "provide",
    "any"
})
public class Tservice
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<Tprovide> provide;
    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "servicefactory")
    protected Boolean servicefactory;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the provide property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the provide property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProvide().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Tprovide }
     * 
     * 
     */
    public List<Tprovide> getProvide() {
        if (provide == null) {
            provide = new ArrayList<Tprovide>();
        }
        return this.provide;
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Element }
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    /**
     * Gets the value of the servicefactory property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isServicefactory() {
        if (servicefactory == null) {
            return false;
        } else {
            return servicefactory;
        }
    }

    /**
     * Sets the value of the servicefactory property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setServicefactory(Boolean value) {
        this.servicefactory = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Tservice)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Tservice that = ((Tservice) object);
        {
            List<Tprovide> lhsProvide;
            lhsProvide = (((this.provide!= null)&&(!this.provide.isEmpty()))?this.getProvide():null);
            List<Tprovide> rhsProvide;
            rhsProvide = (((that.provide!= null)&&(!that.provide.isEmpty()))?that.getProvide():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "provide", lhsProvide), LocatorUtils.property(thatLocator, "provide", rhsProvide), lhsProvide, rhsProvide)) {
                return false;
            }
        }
        {
            List<Object> lhsAny;
            lhsAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (((that.any!= null)&&(!that.any.isEmpty()))?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            boolean lhsServicefactory;
            lhsServicefactory = ((this.servicefactory!= null)?this.isServicefactory():false);
            boolean rhsServicefactory;
            rhsServicefactory = ((that.servicefactory!= null)?that.isServicefactory():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "servicefactory", lhsServicefactory), LocatorUtils.property(thatLocator, "servicefactory", rhsServicefactory), lhsServicefactory, rhsServicefactory)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<Tprovide> theProvide;
            theProvide = (((this.provide!= null)&&(!this.provide.isEmpty()))?this.getProvide():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "provide", theProvide), currentHashCode, theProvide);
        }
        {
            List<Object> theAny;
            theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            boolean theServicefactory;
            theServicefactory = ((this.servicefactory!= null)?this.isServicefactory():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "servicefactory", theServicefactory), currentHashCode, theServicefactory);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<Tprovide> theProvide;
            theProvide = (((this.provide!= null)&&(!this.provide.isEmpty()))?this.getProvide():null);
            strategy.appendField(locator, this, "provide", buffer, theProvide);
        }
        {
            List<Object> theAny;
            theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            boolean theServicefactory;
            theServicefactory = ((this.servicefactory!= null)?this.isServicefactory():false);
            strategy.appendField(locator, this, "servicefactory", buffer, theServicefactory);
        }
        return buffer;
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Tservice) {
            final Tservice copy = ((Tservice) draftCopy);
            if ((this.provide!= null)&&(!this.provide.isEmpty())) {
                List<Tprovide> sourceProvide;
                sourceProvide = (((this.provide!= null)&&(!this.provide.isEmpty()))?this.getProvide():null);
                @SuppressWarnings("unchecked")
                List<Tprovide> copyProvide = ((List<Tprovide> ) strategy.copy(LocatorUtils.property(locator, "provide", sourceProvide), sourceProvide));
                copy.provide = null;
                if (copyProvide!= null) {
                    List<Tprovide> uniqueProvidel = copy.getProvide();
                    uniqueProvidel.addAll(copyProvide);
                }
            } else {
                copy.provide = null;
            }
            if ((this.any!= null)&&(!this.any.isEmpty())) {
                List<Object> sourceAny;
                sourceAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.any = null;
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.any = null;
            }
            if (this.servicefactory!= null) {
                boolean sourceServicefactory;
                sourceServicefactory = ((this.servicefactory!= null)?this.isServicefactory():false);
                boolean copyServicefactory = strategy.copy(LocatorUtils.property(locator, "servicefactory", sourceServicefactory), sourceServicefactory);
                copy.setServicefactory(copyServicefactory);
            } else {
                copy.servicefactory = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Tservice();
    }

}
