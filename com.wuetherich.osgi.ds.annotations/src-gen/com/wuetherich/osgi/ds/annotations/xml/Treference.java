//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.02.15 at 06:39:31 AM CET 
//


package com.wuetherich.osgi.ds.annotations.xml;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.w3c.dom.Element;


/**
 * <p>Java class for Treference complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Treference">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;any processContents='lax' maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="interface" use="required" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="cardinality" type="{http://www.osgi.org/xmlns/scr/v1.1.0}Tcardinality" default="1..1" />
 *       &lt;attribute name="policy" type="{http://www.osgi.org/xmlns/scr/v1.1.0}Tpolicy" default="static" />
 *       &lt;attribute name="target" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="bind" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;attribute name="unbind" type="{http://www.w3.org/2001/XMLSchema}token" />
 *       &lt;anyAttribute/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Treference", propOrder = {
    "any"
})
public class Treference
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "name")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String name;
    @XmlAttribute(name = "interface", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String _interface;
    @XmlAttribute(name = "cardinality")
    protected String cardinality;
    @XmlAttribute(name = "policy")
    protected Tpolicy policy;
    @XmlAttribute(name = "target")
    protected String target;
    @XmlAttribute(name = "bind")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String bind;
    @XmlAttribute(name = "unbind")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String unbind;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Element }
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the interface property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInterface() {
        return _interface;
    }

    /**
     * Sets the value of the interface property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInterface(String value) {
        this._interface = value;
    }

    /**
     * Gets the value of the cardinality property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCardinality() {
        if (cardinality == null) {
            return "1..1";
        } else {
            return cardinality;
        }
    }

    /**
     * Sets the value of the cardinality property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCardinality(String value) {
        this.cardinality = value;
    }

    /**
     * Gets the value of the policy property.
     * 
     * @return
     *     possible object is
     *     {@link Tpolicy }
     *     
     */
    public Tpolicy getPolicy() {
        if (policy == null) {
            return Tpolicy.STATIC;
        } else {
            return policy;
        }
    }

    /**
     * Sets the value of the policy property.
     * 
     * @param value
     *     allowed object is
     *     {@link Tpolicy }
     *     
     */
    public void setPolicy(Tpolicy value) {
        this.policy = value;
    }

    /**
     * Gets the value of the target property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTarget() {
        return target;
    }

    /**
     * Sets the value of the target property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTarget(String value) {
        this.target = value;
    }

    /**
     * Gets the value of the bind property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBind() {
        return bind;
    }

    /**
     * Sets the value of the bind property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBind(String value) {
        this.bind = value;
    }

    /**
     * Gets the value of the unbind property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUnbind() {
        return unbind;
    }

    /**
     * Sets the value of the unbind property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUnbind(String value) {
        this.unbind = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Treference)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Treference that = ((Treference) object);
        {
            List<Object> lhsAny;
            lhsAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (((that.any!= null)&&(!that.any.isEmpty()))?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsInterface;
            lhsInterface = this.getInterface();
            String rhsInterface;
            rhsInterface = that.getInterface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "_interface", lhsInterface), LocatorUtils.property(thatLocator, "_interface", rhsInterface), lhsInterface, rhsInterface)) {
                return false;
            }
        }
        {
            String lhsCardinality;
            lhsCardinality = this.getCardinality();
            String rhsCardinality;
            rhsCardinality = that.getCardinality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cardinality", lhsCardinality), LocatorUtils.property(thatLocator, "cardinality", rhsCardinality), lhsCardinality, rhsCardinality)) {
                return false;
            }
        }
        {
            Tpolicy lhsPolicy;
            lhsPolicy = this.getPolicy();
            Tpolicy rhsPolicy;
            rhsPolicy = that.getPolicy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "policy", lhsPolicy), LocatorUtils.property(thatLocator, "policy", rhsPolicy), lhsPolicy, rhsPolicy)) {
                return false;
            }
        }
        {
            String lhsTarget;
            lhsTarget = this.getTarget();
            String rhsTarget;
            rhsTarget = that.getTarget();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "target", lhsTarget), LocatorUtils.property(thatLocator, "target", rhsTarget), lhsTarget, rhsTarget)) {
                return false;
            }
        }
        {
            String lhsBind;
            lhsBind = this.getBind();
            String rhsBind;
            rhsBind = that.getBind();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bind", lhsBind), LocatorUtils.property(thatLocator, "bind", rhsBind), lhsBind, rhsBind)) {
                return false;
            }
        }
        {
            String lhsUnbind;
            lhsUnbind = this.getUnbind();
            String rhsUnbind;
            rhsUnbind = that.getUnbind();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "unbind", lhsUnbind), LocatorUtils.property(thatLocator, "unbind", rhsUnbind), lhsUnbind, rhsUnbind)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<Object> theAny;
            theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theInterface;
            theInterface = this.getInterface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_interface", theInterface), currentHashCode, theInterface);
        }
        {
            String theCardinality;
            theCardinality = this.getCardinality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cardinality", theCardinality), currentHashCode, theCardinality);
        }
        {
            Tpolicy thePolicy;
            thePolicy = this.getPolicy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "policy", thePolicy), currentHashCode, thePolicy);
        }
        {
            String theTarget;
            theTarget = this.getTarget();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "target", theTarget), currentHashCode, theTarget);
        }
        {
            String theBind;
            theBind = this.getBind();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bind", theBind), currentHashCode, theBind);
        }
        {
            String theUnbind;
            theUnbind = this.getUnbind();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unbind", theUnbind), currentHashCode, theUnbind);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<Object> theAny;
            theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theInterface;
            theInterface = this.getInterface();
            strategy.appendField(locator, this, "_interface", buffer, theInterface);
        }
        {
            String theCardinality;
            theCardinality = this.getCardinality();
            strategy.appendField(locator, this, "cardinality", buffer, theCardinality);
        }
        {
            Tpolicy thePolicy;
            thePolicy = this.getPolicy();
            strategy.appendField(locator, this, "policy", buffer, thePolicy);
        }
        {
            String theTarget;
            theTarget = this.getTarget();
            strategy.appendField(locator, this, "target", buffer, theTarget);
        }
        {
            String theBind;
            theBind = this.getBind();
            strategy.appendField(locator, this, "bind", buffer, theBind);
        }
        {
            String theUnbind;
            theUnbind = this.getUnbind();
            strategy.appendField(locator, this, "unbind", buffer, theUnbind);
        }
        return buffer;
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Treference) {
            final Treference copy = ((Treference) draftCopy);
            if ((this.any!= null)&&(!this.any.isEmpty())) {
                List<Object> sourceAny;
                sourceAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.any = null;
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.any = null;
            }
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this._interface!= null) {
                String sourceInterface;
                sourceInterface = this.getInterface();
                String copyInterface = ((String) strategy.copy(LocatorUtils.property(locator, "_interface", sourceInterface), sourceInterface));
                copy.setInterface(copyInterface);
            } else {
                copy._interface = null;
            }
            if (this.cardinality!= null) {
                String sourceCardinality;
                sourceCardinality = this.getCardinality();
                String copyCardinality = ((String) strategy.copy(LocatorUtils.property(locator, "cardinality", sourceCardinality), sourceCardinality));
                copy.setCardinality(copyCardinality);
            } else {
                copy.cardinality = null;
            }
            if (this.policy!= null) {
                Tpolicy sourcePolicy;
                sourcePolicy = this.getPolicy();
                Tpolicy copyPolicy = ((Tpolicy) strategy.copy(LocatorUtils.property(locator, "policy", sourcePolicy), sourcePolicy));
                copy.setPolicy(copyPolicy);
            } else {
                copy.policy = null;
            }
            if (this.target!= null) {
                String sourceTarget;
                sourceTarget = this.getTarget();
                String copyTarget = ((String) strategy.copy(LocatorUtils.property(locator, "target", sourceTarget), sourceTarget));
                copy.setTarget(copyTarget);
            } else {
                copy.target = null;
            }
            if (this.bind!= null) {
                String sourceBind;
                sourceBind = this.getBind();
                String copyBind = ((String) strategy.copy(LocatorUtils.property(locator, "bind", sourceBind), sourceBind));
                copy.setBind(copyBind);
            } else {
                copy.bind = null;
            }
            if (this.unbind!= null) {
                String sourceUnbind;
                sourceUnbind = this.getUnbind();
                String copyUnbind = ((String) strategy.copy(LocatorUtils.property(locator, "unbind", sourceUnbind), sourceUnbind));
                copy.setUnbind(copyUnbind);
            } else {
                copy.unbind = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Treference();
    }

}
